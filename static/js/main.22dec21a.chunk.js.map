{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactList.module.css","redux/actions.js","redux/reducer.js","redux/store.js","redux/operations.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSucces","addContactError","deleteContactRequest","deleteContactSucces","deleteContactError","changeFilter","clearError","initialState","contacts","createReducer","_","payload","state","filter","id","error","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","phonebook","phoneBookReducer","devTools","process","axios","defaults","baseURL","operations","fetchContacts","dispatch","get","then","data","catch","addContact","name","number","contact","post","deleteContact","contactId","delete","getFilter","getAllContacts","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","getError","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","find","item","alert","onSubmit","this","className","s","contactForm","contactLabel","htmlFor","contactInput","type","onChange","buttonAdd","Component","connect","useStyles","makeStyles","contactListItem","marginTop","backgroundColor","fontFamily","ContactListItem","onDeleteContact","classes","Card","CardContent","Divider","CardActions","IconButton","color","aria-label","component","onClick","contactList","map","onInputChange","actions","uuidv4","filterLabel","filterInput","App","container","mainTitle","secondaryTitle","Filter","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22dec21a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__2gbDj\",\"contactLabel\":\"ContactForm_contactLabel__1Z7Nl\",\"contactInput\":\"ContactForm_contactInput__1rOjG\",\"buttonAdd\":\"ContactForm_buttonAdd__25z6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1fsZW\",\"filterLabel\":\"Filter_filterLabel__25aZM\",\"filterInput\":\"Filter_filterInput__3N6oN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__RGiMf\",\"title\":\"App_title__1tTwm\",\"mainTitle\":\"App_mainTitle__26ZRL App_title__1tTwm\",\"secondaryTitle\":\"App_secondaryTitle__2ziRn App_title__1tTwm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList___XsY0\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSucces = createAction('contacts/addContactSucces');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSucces = createAction('contacts/deleteContactSucces');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/Filter');\r\n\r\nexport const clearError = createAction('contacts/clearError');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  // fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  // addContactRequest,\r\n  addContactSucces,\r\n  addContactError,\r\n  // deleteContactRequest,\r\n  deleteContactSucces,\r\n  deleteContactError,\r\n  changeFilter,\r\n  clearError,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n  // loading: false,\r\n  error: null,\r\n};\r\n\r\nconst contacts = createReducer(initialState.contacts, {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSucces]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSucces]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const loading = createReducer(initialState.loading, {\r\n//   [fetchContactRequest]: () => true,\r\n//   [fetchContactSuccess]: () => false,\r\n//   [fetchContactError]: () => false,\r\n//   [addContactRequest]: () => true,\r\n//   [addContactSucces]: () => false,\r\n//   [addContactError]: () => false,\r\n//   [deleteContactRequest]: () => true,\r\n//   [deleteContactSucces]: () => false,\r\n//   [deleteContactError]: () => false,\r\n// });\r\n\r\nconst filter = createReducer(initialState.filter, {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(initialState.error, {\r\n  [fetchContactError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n  [clearError]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  // loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport phoneBookReducer from './reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    phonebook: phoneBookReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSucces,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSucces,\r\n  deleteContactError,\r\n} from './actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSucces(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSucces(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst operations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default operations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.phonebook.loading;\r\n\r\nconst getFilter = state => state.phonebook.filter;\r\n\r\nconst getAllContacts = state => state.phonebook.contacts;\r\n\r\nconst getError = state => state.phonebook.error;\r\n\r\n//Без мемоизации\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n//С мемоизацией\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst selectors = {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getAllContacts,\r\n  getError,\r\n};\r\n\r\nexport default selectors;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport operations from '../../redux/operations';\nimport selectors from '../../redux/selectors';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onSubmit: PropTypes.func,\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n    e.preventDefault();\n\n    if (name === '') {\n      alert('Enter contact name, please!');\n      return;\n    }\n    if (number === '') {\n      alert('Enter concact phone, please!');\n      return;\n    }\n    if (\n      this.props.contacts.find(\n        item => item.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert('Contact already exists!');\n      return;\n    }\n\n    this.props.onSubmit(name, number);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <>\n        <form className={s.contactForm} onSubmit={this.handleSubmit}>\n          <label className={s.contactLabel} htmlFor={name}>\n            Name\n          </label>\n          <input\n            className={s.contactInput}\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={name}\n            onChange={this.handleChange}\n          />\n\n          <label className={s.contactLabel} htmlFor={number}>\n            Number\n          </label>\n          <input\n            className={s.contactInput}\n            type=\"text\"\n            name=\"number\"\n            id=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            // required\n          />\n\n          <button className={s.buttonAdd} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: selectors.getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(operations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Divider from '@material-ui/core/Divider';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  contactListItem: {\n    marginTop: 10,\n    backgroundColor: '#eeeeff',\n    fontFamily: 'roboto',\n  },\n});\n\nexport default function ContactListItem({ id, name, number, onDeleteContact }) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.contactListItem}>\n      <CardContent>\n        <span>{name}:</span> {number}\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <IconButton\n          color=\"primary\"\n          aria-label=\"upload picture\"\n          component=\"span\"\n          onClick={() => onDeleteContact(id)}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n}\n","import ContactListItem from './ContactListItem';\nimport { connect } from 'react-redux';\nimport operations from '../../redux/operations';\nimport selectors from '../../redux/selectors';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <>\n      <ul className={s.contactList}>\n        {contacts.map(({ id, name, number }) => (\n          <ContactListItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n\nconst mapStateToProps = state => ({\n  contacts: selectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(operations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport selectors from '../../redux/selectors';\nimport s from './Filter.module.css';\n\nconst ContactFilter = ({ value, onInputChange }) => {\n  const id = uuidv4();\n  return (\n    <div className={s.filter}>\n      <label className={s.filterLabel} htmlFor={id}>\n        Find contact by name\n      </label>\n      <input\n        className={s.filterInput}\n        id={id}\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onInputChange}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: selectors.getFilter(state),\n  contacts: selectors.getAllContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInputChange: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter/index';\nimport operations from './redux/operations';\nimport selectors from './redux/selectors';\nimport s from './App.module.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className={s.container}>\n        <h1 className={s.mainTitle}>Phonebook</h1>\n        <ContactForm />\n\n        <h2 className={s.secondaryTitle}>Contacts</h2>\n\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: selectors.getAllContacts(state),\n  isLoadingContacts: selectors.getLoading(state),\n  error: selectors.getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport App from './App';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}